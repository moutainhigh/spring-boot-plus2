package {packPath}.{packPathZp}.{moduleName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import io.swagger.annotations.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.format.annotation.DateTimeFormat;

import {packPath}.{packPathZp}.{moduleName}.model.entity.{tableNameUp};
import {packPath}.{packPathZp}.{moduleName}.model.vo.{tableNameUp}VO;
import {packPath}.{packPathZp}.{moduleName}.model.dto.{tableNameUp}DTO;
import {packPath}.{packPathZp}.{moduleName}.service.{tableNameUp}Service;
import {packPath}.common.result.Result;
import {packPath}.common.utils.BeanDtoVoUtil;
import {packPath}.others.base.controller.BaseController;
import java.util.Arrays;
import java.time.LocalDateTime;


/**
 * {tableComment}
 * <p>
 * {describe}
 * </p>
 * {author}
 * {email}
 * {date}
 */
@RestController
@RequestMapping("/{moduleName}/{tableNameLower}")
@Api(value ="{tableNameUp}" ,tags = "{tableComment}",description = "{tableComment}")
public class {tableNameUp}Controller extends BaseController<{tableNameUp}Service>  {


    @RequestMapping(value = "/findPage", method = RequestMethod.GET)
    @ApiOperation("分页查询")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "页数", required = true, paramType = "query",example = "1"),
            @ApiImplicitParam(name = "limit", value = "记录数", required = true, paramType = "query",example = "20")
    })
    public Result<IPage<{tableNameUp}VO>> findPage({findPageParam}) {
        Page<{tableNameUp}> page = baseService.page(this.getPage(), new LambdaQueryWrapper<{tableNameUp}>()
                .orderByAsc({tableNameUp}::getId)
{findPageMybatisPlus}
        );
        return Result.successFind(BeanDtoVoUtil.pageVo(page, {tableNameUp}VO.class));
    }


    @RequestMapping(value = "/insert", method = RequestMethod.POST)
    @ApiOperation("添加")
    public Result<Void> insert(@RequestBody @Validated {tableNameUp}DTO dto) {
        {tableNameUp} {tableNameLower} = dto.convert({tableNameUp}.class);
        baseService.save({tableNameLower});
        return Result.successInsert();
    }


    @RequestMapping(value = "/upd", method = RequestMethod.PUT)
    @ApiOperation("ID编辑")
    public Result<Void> update(@RequestBody @Validated {tableNameUp}DTO dto) {
        baseService.updateById(dto.convert({tableNameUp}.class));
        return Result.successUpdate();
    }


    @RequestMapping(value = "/del", method = RequestMethod.DELETE)
    @ApiOperation("单删除")
    public Result<Void> delete(@RequestParam String id) {
        baseService.removeById(id);
        return Result.successDelete();
    }


    @RequestMapping(value = "/delByIds", method = RequestMethod.DELETE)
    @ApiOperation("批量删除")
    public Result<Void> deleteByIds(@RequestParam String[] ids) {
        baseService.removeByIds(Arrays.asList(ids));
        return Result.successDelete();
    }
}
