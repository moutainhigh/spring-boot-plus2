package com.ws.ldy.enums;import com.ws.ldy.modules.sys.admin.model.entity.AdminAuthority;import com.ws.ldy.modules.sys.admin.model.vo.AdminDictionaryVO;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 常量类 * * @author ws * @mail 1720696548@qq.com * @date 2020/4/27 0027 23:12 * @return */public interface BaseConstant {    /**     * 接口类型, 类标有该参数的类所有接口会被加入权限扫描范围内,     * 这里配置的内容将在项目启动时自动对应 Enums.Admin.AuthorityType, 在 AdminAuthorityServiceImpl 的 refreshAuthDB方法中处理     */    interface InterfaceType {        String PC_ADMIN = "pc-admin";  //  pc-- 管理端/ Enums.Admin.AuthorityType= 0  管理端,默认[需登录+需授权]        String PC_USER = "pc-user";    //  pc-- 用户端/ Enums.Admin.AuthorityType= 1  用户端,默认[需登录]        String PC_BASE = "pc-base";    //  pc-- 通用  / Enums.Admin.AuthorityType= 100 [默认放行]    }    /**     * 系统核心常量类     */    interface Sys {        /**         * TOKEN         */        String TOKEN = "TOKEN";        /**         *  幂等 token         */        String IDEMPOTENT_TOKEN = "IDEMPOTENT_TOKEN";        /**         * 绝对放行接口，不受限于-权限接口管理         */        List<String> URIS = new ArrayList<String>() {{            add(API + "/admin/adminUser/login");          // 管理端登录接口            add(API + "/admin/adminRole/updRoleAuthAll"); // 所有角色有所有权限        }};        /**         * 所有api 接口的前缀         */        String API = "/api";    }    /**     * ADMIN 模板     */    interface ADMIN {        /**         * 牙贝帮助中心的父级 字典code         */        String HELP_CATEGORY = "HELP_CATEGORY";        /**         * 系统管理员角色code         */        String ROLE_SYS = "SYS";    }    /**     * 系统的缓存数据(所有通用)     */    class Cache {        /**         * 当前系统的所有权限接口数据（key = uri ）         * 权限版本号：version，当版本号一致时, 用户调用任何接口都将刷新Token, 重而热更新用户的访问权限         */        public static Map<String, AdminAuthority> AUTH_MAP = new HashMap<>();        public static Integer AUTH_VERSION = 0;        /**         * 数据字典(code分组), 不包括禁用数据，等同于 Enums.java 文件的数据         * 版本号：version，当版本号一致时, 不返回前台 dictVOGroupMap 数据         */        public static Map<String, AdminDictionaryVO.FindCodeGroup> DICT_MAP_GROUP = null;        /**         * 黑名单/白名单配置信息( key=1(白名单)  key=2(黑名单)) 黑名单优先级高于白名单, list为 ip集合         */        public static Map<Integer, List<String>> BLACKLIST_CACHE = null;    }}